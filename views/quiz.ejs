<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quiz App - Quiz</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #4361ee;
            --secondary-color: #3f37c9;
            --success-color: #4cc9f0;
            --danger-color: #f72585;
            --light-color: #f8f9fa;
            --dark-color: #212529;
            --gray-color: #6c757d;
            --purple-color: #9C27B0;
            --purple-dark: #7B1FA2;
        }

        * { margin: 0; padding: 0; box-sizing: border-box; }

        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .container {
            background-color: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 800px;
            transition: all 0.3s ease;
            position: relative;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f0f2f5;
            position: relative;
            padding-top: 20px;
        }

        .timer {
            position: absolute;
            right: 20px;
            top: -15px;
            font-size: 24px;
            font-weight: 600;
            color: var(--dark-color);
            background-color: rgba(0, 0, 0, 0.05);
            padding: 8px 15px;
            border-radius: 30px;
            display: flex;
            align-items: center;
            transition: all 0.3s ease;
            z-index: 2;
        }

        .score-display {
            position: absolute;
            right: 20px;
            top: 35px;
            background-color: rgba(156, 39, 176, 0.1);
            color: var(--purple-color);
            padding: 8px 15px;
            border-radius: 30px;
            font-weight: 600;
            font-size: 14px;
            z-index: 1;
        }

        h1 {
            color: var(--dark-color);
            font-weight: 600;
            font-size: 28px;
        }

        .timer {
            position: absolute;
            right: 20px;
            top: -15px;
            font-size: 24px;
            font-weight: 600;
            color: var(--dark-color);
            background-color: rgba(0, 0, 0, 0.05);
            padding: 8px 15px;
            border-radius: 30px;
            display: flex;
            align-items: center;
            transition: all 0.3s ease;
            z-index: 10;
        }

     
      

        .timer.warning {
            animation: pulse 1s infinite;
            color: #e74c3c;
            background-color: rgba(231, 76, 60, 0.1);
        }

        .question {
            font-size: 22px;
            margin-bottom: 25px;
            color: var(--dark-color);
            font-weight: 500;
            line-height: 1.4;
        }

        .question-number {
            font-size: 14px;
            color: var(--gray-color);
            margin-bottom: 10px;
            font-weight: 500;
        }

        .options {
            display: grid;
            gap: 15px;
            margin-bottom: 20px;
        }

        .option-wrapper { 
            position: relative; 
        }

        .option {
            width: 100%;
            padding: 18px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 16px;
            font-weight: 500;
            text-align: left;
            position: relative;
            overflow: hidden;
            background-color: white;
        }

        .option:hover {
            background-color: rgba(67, 97, 238, 0.05);
            border-color: var(--primary-color);
            transform: translateY(-2px);
        }

        .option.selected {
            background-color: rgba(67, 97, 238, 0.1);
            border-color: var(--primary-color);
            color: var(--primary-color);
        }

        .option.correct {
            background-color: rgba(76, 201, 240, 0.1);
            color: #2ecc71;
            border-color: #2ecc71;
        }

        .option.incorrect {
            background-color: rgba(231, 76, 60, 0.1);
            color: #e74c3c;
            border-color: #e74c3c;
        }

        .analytics-bar {
            height: 30px;
            background-color: #f0f2f5;
            border-radius: 15px;
            margin-top: 8px;
            overflow: hidden;
            display: none;
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .analytics-fill {
            height: 100%;
            width: 0;
            transition: width 0.5s ease;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: flex-end;
            padding-right: 15px;
        }

        .analytics-fill.correct {
            background-color: var(--purple-color);
        }

        .analytics-fill.incorrect {
            background-color: #e74c3c;
        }

        .analytics-label {
            color: white;
            font-size: 14px;
            font-weight: 600;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
        }

        .progress {
            margin-top: 25px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 16px;
            color: var(--gray-color);
            font-weight: 500;
        }

        .score-display {
            background-color: rgba(156, 39, 176, 0.1);
            color: var(--purple-color);
            padding: 8px 15px;
            border-radius: 30px;
            font-weight: 600;
            font-size: 14px;
        }

        .progress-bar {
            height: 10px;
            background-color: #e9ecef;
            border-radius: 5px;
            margin-top: 10px;
            overflow: hidden;
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .progress-fill {
            height: 100%;
            background: var(--purple-color);
            border-radius: 5px;
            transition: width 0.3s ease;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .feedback {
            margin-top: 20px;
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            display: none;
            font-weight: 500;
            animation: fadeIn 0.5s ease;
        }

        .feedback.correct {
            background-color: rgba(46, 204, 113, 0.1);
            color: #2ecc71;
            display: block;
        }

        .feedback.incorrect {
            background-color: rgba(231, 76, 60, 0.1);
            color: #e74c3c;
            display: block;
        }

        .submit-btn {
            display: block;
            width: 100%;
            padding: 15px;
            background: var(--purple-color);
            color: white;
            border: none;
            border-radius: 10px;
            font-size: 18px;
            font-weight: 700;
            cursor: pointer;
            margin-top: 20px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            box-shadow: 0 6px 12px rgba(156, 39, 176, 0.3);
            letter-spacing: 1px;
            text-transform: uppercase;
            border: 2px solid transparent;
        }

        .submit-btn:hover {
            background: var(--purple-dark);
            transform: translateY(-3px);
            box-shadow: 0 8px 15px rgba(103, 58, 183, 0.4);
            border-color: rgba(255, 255, 255, 0.3);
        }

        .submit-btn:disabled {
            background: linear-gradient(135deg, #bdc3c7 0%, #95a5a6 100%);
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
            opacity: 0.7;
            border-color: transparent;
        }

        .fullscreen-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s ease;
        }

        .fullscreen-overlay.show {
            opacity: 1;
            pointer-events: auto;
        }

        .overlay-content {
            background: white;
            padding: 30px;
            border-radius: 15px;
            width: 90%;
            max-width: 600px;
            transform: translateY(20px);
            transition: transform 0.3s ease;
        }

        .fullscreen-overlay.show .overlay-content {
            transform: translateY(0);
        }

        .leaderboard-item {
            display: flex;
            justify-content: space-between;
            padding: 15px;
            border-bottom: 1px solid #f0f2f5;
            font-size: 16px;
            align-items: center;
            animation: slideIn 0.3s ease;
        }

        .leaderboard-item .user-info {
            display: flex;
            align-items: center;
        }

        .leaderboard-item.highlight {
            background: linear-gradient(90deg, rgba(156, 39, 176, 0.1), transparent);
            border-left: 3px solid var(--purple-color);
            font-weight: 600;
        }

        .leaderboard-item .score {
            font-weight: 600;
            color: var(--purple-color);
            font-size: 18px;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes slideIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
</head>
<body>
    <div class="fullscreen-overlay">
        <div class="overlay-content">
            <h2 style="margin-bottom: 20px; color: var(--dark-color);">Current Standings</h2>
            <div class="leaderboard-list"></div>
        </div>
    </div>

    <div class="container">
        <div class="header">
            <h1>Quiz Challenge</h1>
            <div class="timer">Time: 10</div>
            <div class="score-display">Score: 0</div>
        </div>
        
        <div class="progress">
            <div class="progress-text"></div>
        </div>
        <div class="progress-bar">
            <div class="progress-fill"></div>
        </div>
        
        <div class="question-container">
            <div class="question-number"></div>
            <div class="question"></div>
            <div class="options"></div>
            <button class="submit-btn" onclick="handleSubmit()" disabled>Submit Answer</button>
            <div class="feedback"></div>
        </div>
        
       
    </div>

    <script>
        let currentQuestion = 0;
        let score = 0;
        let timer;
        let timeLeft = 10;
        let questions = [];
        let selectedAnswer = null;
        let userSelections = [];
        let optionStats = {};
        let username = '';
        
        async function getCurrentUser() {
            try {
                const response = await fetch('/api/current-user');
                const data = await response.json();
                username = data.username;
            } catch (error) {
                console.error('Error getting current user:', error);
            }
        }
        
        async function loadQuestions() {
            try {
                await getCurrentUser();
                const response = await fetch('/api/questions');
                questions = await response.json();
                displayQuestion();
            } catch (error) {
                console.error('Error loading questions:', error);
            }
        }

        function displayQuestion() {
            if (currentQuestion >= questions.length) {
                submitQuiz();
                return;
            }

            const question = questions[currentQuestion];
            document.querySelector('.question').textContent = question.question;
            document.querySelector('.question-number').textContent = `Question ${currentQuestion + 1} of ${questions.length}`;
            
            const optionsContainer = document.querySelector('.options');
            optionsContainer.innerHTML = '';
            
            question.options.forEach((option, index) => {
                const button = document.createElement('button');
                button.className = 'option';
                button.textContent = option;
                button.onclick = () => selectOption(index);
                
                const optionWrapper = document.createElement('div');
                optionWrapper.className = 'option-wrapper';
                optionWrapper.appendChild(button);
                
                const analyticsBar = document.createElement('div');
                analyticsBar.className = 'analytics-bar';
                analyticsBar.innerHTML = `
                    <div class="analytics-fill">
                        <span class="analytics-label">0 (0%)</span>
                    </div>
                `;
                optionWrapper.appendChild(analyticsBar);
                
                optionsContainer.appendChild(optionWrapper);
            });

            const progressPercentage = ((currentQuestion + 1) / questions.length) * 100;
            document.querySelector('.progress-fill').style.width = `${progressPercentage}%`;
            document.querySelector('.progress-text').textContent = `Progress: ${currentQuestion + 1}/${questions.length}`;
            
            selectedAnswer = null;
            document.querySelector('.submit-btn').disabled = true;
            document.querySelector('.feedback').style.display = 'none';
            document.querySelector('.score-display').textContent = `Score: ${score}`;
            
            startTimer();
        }

        function startTimer() {
            timeLeft = 10;
            document.querySelector('.timer').textContent = `Time: ${timeLeft}`;
            document.querySelector('.timer').classList.remove('warning');
            
            clearInterval(timer);
            timer = setInterval(() => {
                timeLeft--;
                document.querySelector('.timer').textContent = `Time: ${timeLeft}`;
                
                if (timeLeft <= 3) {
                    document.querySelector('.timer').classList.add('warning');
                }
                
                if (timeLeft <= 0) {
                    clearInterval(timer);
                    submitAnswer();
                }
            }, 1000);
        }

        function selectOption(index) {
            selectedAnswer = index;
            const options = document.querySelectorAll('.option');
            options.forEach(option => option.classList.remove('selected'));
            options[index].classList.add('selected');
            document.querySelector('.submit-btn').disabled = false;
        }

        function handleSubmit() {
            clearInterval(timer);
            submitAnswer();
        }

        function updateOptionStats(questionIndex, selectedOption) {
            if (!optionStats[questionIndex]) {
                optionStats[questionIndex] = Array(questions[questionIndex].options.length).fill(0);
            }
            if (selectedOption !== null) {
                optionStats[questionIndex][selectedOption]++;
            }
        }

        function displayOptionStats(questionIndex) {
            const totalAnswers = optionStats[questionIndex].reduce((a, b) => a + b, 0);
            const analyticsBars = document.querySelectorAll('.analytics-bar .analytics-fill');
            
            analyticsBars.forEach((bar, index) => {
                const count = optionStats[questionIndex][index];
                const percentage = totalAnswers > 0 ? Math.round((count / totalAnswers) * 100) : 0;
                bar.style.width = `${percentage}%`;
                bar.querySelector('.analytics-label').textContent = `${count} (${percentage}%)`;
                
                if (index === questions[questionIndex].correctAnswer) {
                    bar.classList.add('correct');
                } else {
                    bar.classList.add('incorrect');
                }
            });
        }

        function submitAnswer() {
            clearInterval(timer);
            const options = document.querySelectorAll('.option');
            const correctAnswer = questions[currentQuestion].correctAnswer;
            
            userSelections.push({
                questionIndex: currentQuestion,
                selectedOption: selectedAnswer
            });
            
            options.forEach(option => option.disabled = true);
            document.querySelector('.submit-btn').disabled = true;
            options[correctAnswer].classList.add('correct');
            
            if (selectedAnswer === null) {
                document.querySelector('.feedback').textContent = "Time's up! No answer selected.";
                document.querySelector('.feedback').className = 'feedback incorrect';
            } else if (selectedAnswer !== correctAnswer) {
                options[selectedAnswer].classList.add('incorrect');
                document.querySelector('.feedback').textContent = 'Incorrect!';
                document.querySelector('.feedback').className = 'feedback incorrect';
            } else {
                score++;
                document.querySelector('.feedback').textContent = 'Correct!';
                document.querySelector('.feedback').className = 'feedback correct';
                document.querySelector('.score-display').textContent = `Score: ${score}`;
            }
            document.querySelector('.feedback').style.display = 'block';
            
            setTimeout(() => {
                const analyticsBars = document.querySelectorAll('.analytics-bar');
                analyticsBars.forEach(bar => bar.style.display = 'block');
                updateOptionStats(currentQuestion, selectedAnswer);
                displayOptionStats(currentQuestion);
                
                setTimeout(async () => {
                    try {
                        const response = await fetch('/api/scores/current', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                currentQuestion,
                                score,
                                selections: userSelections
                            })
                        });
                        const leaderboardData = await response.json();
                        
                        const leaderboardList = document.querySelector('.leaderboard-list');
                        leaderboardList.innerHTML = leaderboardData.map((entry, index) => `
                            <div class="leaderboard-item ${entry.username === username ? 'highlight' : ''}">
                                <div class="user-info">
                                    <div class="name">${entry.username}</div>
                                </div>
                                <div class="score">${entry.score}</div>
                            </div>
                        `).join('');
                        
                        document.querySelector('.fullscreen-overlay').classList.add('show');
                        
                        setTimeout(() => {
                            document.querySelector('.fullscreen-overlay').classList.remove('show');
                            setTimeout(() => {
                                currentQuestion++;
                                displayQuestion();
                            }, 300);
                        }, 2500);
                    } catch (error) {
                        console.error('Error updating leaderboard:', error);
                        currentQuestion++;
                        displayQuestion();
                    }
                }, 1500);
            }, 1000);
        }

        async function submitQuiz() {
            try {
                const response = await fetch('/api/scores', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        score,
                        selections: userSelections
                    })
                });
        
                if (response.ok) {
                    document.querySelector('.container').innerHTML = `
                        <div style="text-align: center; padding: 40px 0;">
                            <h1 style="color: var(--purple-color); margin-bottom: 20px;">Quiz Completed!</h1>
                            <div style="font-size: 24px; margin-bottom: 30px;">Your Final Score: ${score}/${questions.length}</div>
                            <p style="margin-bottom: 30px; color: var(--gray-color);">Redirecting to leaderboard...</p>
                        </div>
                    `;
                    
                    setTimeout(() => {
                        window.location.href = '/leaderboard';
                    }, 2000);
                }
            } catch (error) {
                console.error('Error submitting quiz:', error);
            }
        }

        loadQuestions();
    </script>
</body>
</html>