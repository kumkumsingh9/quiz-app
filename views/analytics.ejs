<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quiz App - Analytics</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #4361ee;
            --secondary-color: #3f37c9;
            --success-color: #4cc9f0;
            --danger-color: #f72585;
            --light-color: #f8f9fa;
            --dark-color: #212529;
            --gray-color: #6c757d;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #4361ee 0%, #3f37c9 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            background-color: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            width: 100%;
            max-width: 1000px;
            margin: 0 auto;
        }
        
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f0f2f5;
        }
        
        h1 {
            color: var(--primary-color);
            font-weight: 600;
            font-size: 28px;
        }
        
        .btn {
            display: inline-block;
            padding: 10px 20px;
            background-color: var(--primary-color);
            color: white;
            text-decoration: none;
            border-radius: 5px;
            font-weight: 500;
        }
        
        .btn:hover {
            background-color: var(--secondary-color);
        }
        
        .analytics-container {
            margin-top: 20px;
        }
        
        .question-card {
            background-color: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }
        
        .question-title {
            font-size: 18px;
            font-weight: 600;
            color: var(--dark-color);
            margin-bottom: 15px;
        }
        
        .options-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 15px;
        }
        
        .option-bar {
            background-color: #e9ecef;
            border-radius: 8px;
            overflow: hidden;
            position: relative;
            height: 30px;
            margin-bottom: 10px;
        }
        
        .option-fill {
            height: 100%;
            background-color: var(--primary-color);
            border-radius: 8px;
            position: relative;
        }
        
        .option-fill.correct {
            background-color: var(--success-color);
        }
        
        .option-label {
            position: absolute;
            top: 50%;
            left: 10px;
            transform: translateY(-50%);
            color: white;
            font-weight: 500;
            z-index: 1;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
        }
        
        .option-count {
            position: absolute;
            top: 50%;
            right: 10px;
            transform: translateY(-50%);
            color: white;
            font-weight: 500;
            z-index: 1;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
        }
        
        .option-text {
            font-size: 14px;
            color: var(--gray-color);
            margin-bottom: 5px;
        }
        
        .stats-summary {
            display: flex;
            justify-content: space-between;
            margin-top: 10px;
            font-size: 14px;
            color: var(--gray-color);
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: var(--gray-color);
            font-size: 18px;
        }
        
        .no-data {
            text-align: center;
            padding: 40px;
            color: var(--gray-color);
            font-size: 18px;
        }
        
        .correct-badge {
            display: inline-block;
            background-color: var(--success-color);
            color: white;
            padding: 3px 8px;
            border-radius: 4px;
            font-size: 12px;
            margin-left: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Quiz Analytics</h1>
            <div>
                <a href="/leaderboard" class="btn">Leaderboard</a>
                <a href="/" class="btn">Home</a>
            </div>
        </div>
        
        <div class="analytics-container" id="analytics-container">
            <div class="loading">Loading analytics data...</div>
        </div>
    </div>

    <script>
        // Pre-fetch analytics data
        let analyticsData = null;
        
        async function fetchAnalyticsData() {
            try {
                const response = await fetch('/api/analytics');
                analyticsData = await response.json();
                return analyticsData;
            } catch (error) {
                console.error('Error fetching analytics:', error);
                return null;
            }
        }
        
        // Start fetching data immediately
        fetchAnalyticsData();
        
        function renderAnalytics(data) {
            const container = document.getElementById('analytics-container');
            
            if (!data || data.length === 0) {
                container.innerHTML = `
                    <div class="no-data">
                        No analytics data available yet. Take the quiz to generate data!
                    </div>
                `;
                return;
            }
            
            const fragment = document.createDocumentFragment();
            
            data.forEach((item, index) => {
                const questionNumber = index + 1;
                const totalSelections = item.totalSelections;
                
                const questionCard = document.createElement('div');
                questionCard.className = 'question-card';
                
                const questionTitle = document.createElement('div');
                questionTitle.className = 'question-title';
                questionTitle.textContent = `Question ${questionNumber}: ${item.question}`;
                
                const optionsContainer = document.createElement('div');
                optionsContainer.className = 'options-container';
                
                item.options.forEach((option, optionIndex) => {
                    const isCorrect = optionIndex === item.correctAnswer;
                    const count = item.counts[optionIndex];
                    const percentage = item.percentages[optionIndex];
                    
                    const optionDiv = document.createElement('div');
                    
                    const optionText = document.createElement('div');
                    optionText.className = 'option-text';
                    optionText.innerHTML = `${option} ${isCorrect ? '<span class="correct-badge">Correct</span>' : ''}`;
                    
                    const optionBar = document.createElement('div');
                    optionBar.className = 'option-bar';
                    
                    const optionFill = document.createElement('div');
                    optionFill.className = `option-fill ${isCorrect ? 'correct' : ''}`;
                    optionFill.style.width = `${percentage}%`;
                    
                    const optionLabel = document.createElement('div');
                    optionLabel.className = 'option-label';
                    optionLabel.textContent = String.fromCharCode(65 + optionIndex);
                    
                    const optionCount = document.createElement('div');
                    optionCount.className = 'option-count';
                    optionCount.textContent = `${count} (${percentage}%)`;
                    
                    optionBar.appendChild(optionFill);
                    optionBar.appendChild(optionLabel);
                    optionBar.appendChild(optionCount);
                    
                    optionDiv.appendChild(optionText);
                    optionDiv.appendChild(optionBar);
                    optionsContainer.appendChild(optionDiv);
                });
                
                const statsSummary = document.createElement('div');
                statsSummary.className = 'stats-summary';
                statsSummary.innerHTML = `<span>Total responses: ${totalSelections}</span>`;
                
                questionCard.appendChild(questionTitle);
                questionCard.appendChild(optionsContainer);
                questionCard.appendChild(statsSummary);
                
                fragment.appendChild(questionCard);
            });
            
            container.innerHTML = '';
            container.appendChild(fragment);
        }
        
        // Load analytics when the page loads
        window.onload = async function() {
            // If data is already fetched, render it immediately
            if (analyticsData) {
                renderAnalytics(analyticsData);
            } else {
                // Otherwise, wait for the data to be fetched
                const data = await fetchAnalyticsData();
                renderAnalytics(data);
            }
        };
    </script>
</body>
</html> 